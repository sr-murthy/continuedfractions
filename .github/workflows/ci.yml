# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI

on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main

permissions:
  contents: read

concurrency:
  group: ${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    env:
      PYTHONDEVMODE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        install-via: [pip]
        arch: [x64]
        include:
          - python-version: "3.11"
            os: ubuntu-latest
            install-via: script
            arch: x64
          - python-version: "3.11"
            os: windows-latest
            install-via: pip
            arch: x86

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      if: matrix.python-version != '3.10'
      with:
        python-version: "3.10"
        architecture: ${{ matrix.arch }}

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      if: matrix.python-version != '3.11'
      with:
        python-version: "3.11"
        architecture: ${{ matrix.arch }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}
        allow-prereleases: false

    - name: Set Variables
      id: set_variables
      shell: bash
      run: |
        echo "PY=$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')" >> $GITHUB_OUTPUT
        echo "PIP_CACHE=$(pip cache dir)" >> $GITHUB_OUTPUT

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ${{ steps.set_variables.outputs.PIP_CACHE }}
        key: ${{ runner.os }}-pip-${{ steps.set_variables.outputs.PY }}

    - name: Cache venv
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.python-version }}-${{ hashFiles('pdm.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.python-version }}-

    - name: Install current PDM via pip
      if: matrix.install-via == 'pip'
      run: |
        python -m pip install pdm
        pdm use -f .venv
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "GITHUB_PATH=$GITHUB_PATH"
        echo "GITHUB_ENV=$GITHUB_ENV"

    - name: Install current PDM via install script
      if: matrix.install-via == 'script'
      run: |
        curl -sSLO https://pdm-project.org/install-pdm.py
        curl -sSL https://pdm-project.org/install-pdm.py.sha256 | shasum -a 256 -c -
        python3 install-pdm.py
        pdm use -f .venv
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "GITHUB_PATH=$GITHUB_PATH"
        echo "GITHUB_ENV=$GITHUB_ENV"

    - name: Lint + Run tests + Measure code coverage
      run: |
        pdm use -f .venv
        pdm install -v -dGlint --no-self --no-isolation
        pdm run -v lint
        pdm run -v doctests
        pdm install -v -dGtest --no-self --no-isolation
        pdm run -v pytest

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: sr-murthy/continuedfractions
        file: ./coverage.xml
        flags: unit
