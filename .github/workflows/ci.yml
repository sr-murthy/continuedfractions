# This workflow is designed to lint and test source code against multiple
# combinations of Python version, OS, and hardware architecture.

name: CI

on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main

permissions:
  contents: read

concurrency:
  group: ${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    env:
      PYTHONDEVMODE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.12", "3.13"]
        os: [ubuntu-latest, macos-latest, windows-latest]
        install-via: [pip]
        arch: [x64]
          - python-version: "3.12"
            os: macos-latest
            install-via: pip
            arch: arm64
          - python-version: "3.13"
            os: macos-latest
            install-via: pip
            arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}
        allow-prereleases: false

    - name: Set Variables
      id: set_variables
      shell: bash
      run: |
        echo "PY=$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')" >> $GITHUB_OUTPUT
        echo "PIP_CACHE=$(pip cache dir)" >> $GITHUB_OUTPUT

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ${{ steps.set_variables.outputs.PIP_CACHE }}
        key: ${{ runner.os }}-pip-${{ steps.set_variables.outputs.PY }}

    - name: Cache venv
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.python-version }}-${{ hashFiles('pdm.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.python-version }}-

    - name: Install current PDM via pip
      if: matrix.install-via == 'pip'
      run: |
        python -m pip install pdm
        pdm info -v
        pdm venv list -v
        pdm use -f .venv
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "GITHUB_PATH=$GITHUB_PATH"
        echo "GITHUB_ENV=$GITHUB_ENV"

    - name: Lint + Run unit & acceptance tests + Measure code coverage
      run: |
        pdm use -f .venv
        pdm install -v
        pdm run -v lint
        pdm run -v pytest
        pdm run -v doctests

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: sr-murthy/continuedfractions
        file: ./coverage.xml
        flags: unit
